Disadvantages of Array-based lists:
1. Insert item at beginning or middle
	-> Time proportional to length of array so we can move items to put item in
	e.g. Phone book adding phone numbers/names to it
2. Arrays have a fixed length
	-> Once we reach limit, need to copy array into new array with double size

Linked Lists: made up of 'nodes', where nodes has an item and a reference to next node in list

Advantages over Array-based lists:
1. Inserting item in middle of linked list takes contstant time if you have reference to previous node
2. Moreover, list can keep growing until memory runs out

Disadvantages of Linked Lists:
1. Finding the nth item of a linked list takes time proportional to length of list
	- O(1) for array-based lists

Lists of Objects:
Reference any object by declaring a reference of type Object

List Class:
	Problems with Single List Nodes:
		e.g. Roommate and I have grocery shopping list and need to update the list scenario
		1. Insert new item at beginning of list
			a. Need to update all classes, otherwise only one is and the others aren't
		2. How do you represent an empty list?
			a. Run-time error if you call method on null object
	Solution: separate Single List Node class maintaining head of list

Private Method: field is invisible and inaccessible to other classes
	- Why?
		1. To prevent data from being corrupted by other classes
		2. You can improve the implementation without causing other classes to foil

Interface of a class: prototypes for public methods, plus descriptions of their behaviors

Abstract Data Type (ADT): a class with well-defined interface, but implementation details are hidden from other classes

Invariant: a fact about a data structure that is always true
	e.g. Date object always represents a valid date

Not all classes are ADTs. Some classes just store data (no invariants)

Single List ADT:
	Advantages of Single List Class:
		- Single List ADT enforces 2 invariants:
			1. 'Size' is always correct
			2. List is never circularly linked
			Both goals accomplished because only Single List methods can change the lists
	Single List ensures this:
		1. Fields of Single List class (head and size) are 'private'
		2. No method of Single List class returns Single List Node

Doubly-Linked Lists:
	Inserting/deleting at front of list is easy
	Inserting/deleting at end of list takes a long time for SList
	Inserting/deleting items at both ends is O(1) for DList
class DListNode {
	Object item;
	DListNode next;
	DListNode prev;
}
class DList {
	private DListNode head;
	private DListNode tail;
}


	Sentinel: special node that does not represent an item

DList v2: circularly linked

class DList2 {
	private DListNode head;
	private int size;
}

DList invariants with sentinel:
	1. For any DList d, d.head != null
	2. For any DListNode x, x.next != null
	3. For any DListNode x, x.prev != null
	4. For any DListNode x, if x.next = y, then y.prev = x
	5. For any DListNode x, if x.prev = y, then y.next = x
	6. DList's size variable is # of DListNodes, NOT counting sentinel

Empty DList: sentinel's prev and next field point to itself
