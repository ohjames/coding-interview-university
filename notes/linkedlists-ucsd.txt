Single Linked Lists: head pointer that points to a node which subsequently points to following node
	Node: contains a key and next pointer

List API
PushFront(Key): adds to front			O(1)
Key TopFront(): return front item		O(1)
PopFront(): remove front item			O(1)
PushBack(Key): add to back			O(N) if without tail; O(1) with tail
Key TopBack(): return back item			O(N) if without tail; O(1) with tail
PopBack(): remove back item			O(N)
Boolean Find(Key): is key in list?		O(N)
Erase(Key): remove key from list		O(N)
Boolean Empty(): is list empty?			O(1)
AddBefore(Node, Key): adds key before node	O(N)
AddAfter(Node, Key): adds key after node	O(1)

Doubly Linked Lists: head and tail pointers
	Node: contains a key, next pointer, and prev pointer

List API
PushFront(Key): adds to front                   O(1)
Key TopFront(): return front item               O(1)
PopFront(): remove front item                   O(1)
PushBack(Key): add to back                      O(N) if without tail; O(1) with tail
Key TopBack(): return back item                 O(N) if without tail; O(1) with tail
PopBack(): remove back item                     O(1)
Boolean Find(Key): is key in list?              O(N)
Erase(Key): remove key from list                O(N)
Boolean Empty(): is list empty?                 O(1)
AddBefore(Node, Key): adds key before node      O(1)
AddAfter(Node, Key): adds key after node        O(1)

Differences:
	- Constant time to insert at or remove from the front
	- With tail and doubly-linked, constant time to insert at or remove from back
	- O(n) time to find arbritrary element
	- List elements need not be contiguous
	- With doubly-linked list, constant time to insert between nodes or remove a node


