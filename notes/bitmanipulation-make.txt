Bitwise Operations:
AND     &
OR      |
XOR     ^
NOT     ~
L Shift <<
R Shift >>

Set Bit: uses mask to set a bit from 0 to 1
def set_bit(x, position):
    mask = 1 << position
    return x | mask
e.g.
    x           00000110
    position    00000101    this is index 5
    mask        00100000
    result      00100110

Clear Bit: sets a bit from 1 to 0
def clear_bit(x, position):
    mask = 1 << position
    return x & ~mask
e.g.
    x           00000110    
    position    00000010    this is index 2
    mask        00000100
   
    ~mask       11111011
    result      00000010

Flip Bit: switches a bit at specific index
def flip_bit(x, position):
    mask = 1 << position
    return x ^ mask
e.g.
    x           01100110
    position    00000010    this is index 2
    mask        00000100
    result      01100010

Is Bit Set: return boolean at specific index
def is_bit_set(x, position):
    shifted = x >> position
    return shifted & 1
e.g.
    x           01100110
    position    00000101    this is index 5
    shifted     00000011
    result      00000001

Modify Bit: decide whether to set or clear bit
def modify_bit(x, position, state):
    mask = 1 << position
    return (x & ~mask) | (-state & mask)
e.g.
    x           00000110
    position    00000101    index 5
    state       00000001
    mask        00100000

    ~mask       11011111
    -state      11111111
    x & ~mask   00000110
    -state&mask 00100000
    result      00100110

Check if Even:
(x & 1) == 0

Check if Power of Two:
(x & x-1) == 0